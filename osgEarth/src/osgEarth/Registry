/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_REGISTRY
#define OSGEARTH_REGISTRY 1

#include <osgEarth/Common>
#include <osgEarth/Caching>
#include <osgEarth/Profile>
#include <ReentrantMutex>
#include <ScopedLock>

#include <osg/Referenced>

#define GDAL_SCOPED_LOCK \
    OpenThreads::ScopedLock<OpenThreads::ReentrantMutex> _slock( osgEarth::Registry::instance()->getGDALMutex() )

namespace osgEarth
{
    class OSGEARTH_EXPORT Registry : public osg::Referenced
    {
    public:
        static Registry* instance(bool erase = false);

        optional<CacheConfig>& cacheConfigOverride();

        inline OpenThreads::ReentrantMutex& getGDALMutex() { return _gdal_mutex; }

        const Profile* getNamedProfile( const std::string& name ) const;

        const Profile* getGlobalGeodeticProfile() const;

        const Profile* getGlobalMercatorProfile() const;

        const Profile* getCubeProfile() const;

    protected:
        virtual ~Registry();
        Registry();

        void destruct();

        optional<CacheConfig> _cacheConfigOverride;
        OpenThreads::ReentrantMutex _gdal_mutex;
        bool _gdal_registered;

        osg::ref_ptr<const Profile> _global_geodetic_profile;
        osg::ref_ptr<const Profile> _global_mercator_profile;
        osg::ref_ptr<const Profile> _cube_profile;

    };
}

#endif //OSGEARTH_REGISTRY