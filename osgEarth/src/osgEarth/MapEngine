/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_MAP_ENGINE_H
#define OSGEARTH_MAP_ENGINE_H 1

#include <osgEarth/MapEngineProperties>
#include <osgEarth/TileSource>
#include <osgEarth/Compositing>

#include <ReadWriteMutex>
#include <osgDB/ReaderWriter>
#include <osgTerrain/Terrain>
#include <osg/CoordinateSystemNode>
#include <vector>

namespace osgEarth
{
    class OSGEARTH_EXPORT Map;

    /**
     * MapEngine is the main workhorse in osgEarth. It generates osg Nodes for TileKeys.
     */
    class OSGEARTH_EXPORT MapEngine : public osg::Referenced
    {
    public:
        /**
         * Creates a node graph for a given TileKey.
         */
        osg::Node* createNode( Map* map, osgTerrain::Terrain* terrain, const TileKey* key );

        /**
         * Creates a georeferenced image corresponding to a tile key.
         */
        GeoImage* createGeoImage(const TileKey* key, TileSource* source);

        bool isCached( Map* map, const TileKey* key );

    public: // static methods        


    public:
        MapEngine( const MapEngineProperties& props );

        virtual ~MapEngine();

        /**
         * Gets a pagedLOD child URI given a tile key.
         */
        std::string createURI( unsigned int id, const TileKey* key );

        /**
        * Adds any appropriate child nodes to the given parent group for the given TileKey.
        * The implementation class must define this method.
        *
        * @param parent
        *        The parent osg::Group to add the children to
        * @param key
        *        The tilekey to generate children for
        * @returns
        *        True if all children were successfully added to the group, false otherwise
        */
        virtual bool addChildren(
            Map* map,
            osgTerrain::Terrain* terrain,
            osg::Group* parent,
            const TileKey* key );

        /**
         * The implementation class must define this function, which creates one of
         * a child quadrant of a tile node.
         */
        virtual osg::Node* createQuadrant(
            Map* map,
            osgTerrain::Terrain* terrain,
            const TileKey* key ) =0;


        GeoImage* createValidGeoImage(TileSource* tileSource, const TileKey* key);

        osg::Matrixd getTransformFromExtents(double minX, double minY, double maxX, double maxY) const;

        // checks whether more data exists below the specified key's level of detail
        bool hasMoreLevels( Map* map, const TileKey* key );

        osg::HeightField* createHeightField( Map* map, const TileKey* key, bool fallback );

        static osg::HeightField* createEmptyHeightField( const TileKey* key );

    protected:
        MapEngineProperties _engineProps;
    };
}


#endif // OSGEARTH_MAP_IMPLEMENTATION_H
